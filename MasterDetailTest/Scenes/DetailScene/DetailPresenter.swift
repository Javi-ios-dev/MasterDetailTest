//
//  DetailPresenter.swift
//  MasterDetailTest
//
//  Created by Javier Apaez Arcos on 06/02/25.
//  Copyright (c) 2025 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DetailPresentationLogic {
    func presetItemElement(response: Detail.GetItemElement.Response)
}

class DetailPresenter: DetailPresentationLogic {
    weak var viewController: DetailDisplayLogic?
    
    // MARK: Phone Formatter
    func formatPhoneNumber(_ phoneNumber: String) -> String {
        
        let cleanPhoneNumber = phoneNumber.filter { "0"..."9" ~= $0 || $0 == "x" }
        let components = cleanPhoneNumber.split(separator: "x")
        let number = components.first ?? ""
        let extensionPart = components.count > 1 ? " ext. \(components[1])" : ""
        
        if number.count == 10 {
            
            return "(\(number.prefix(3))) \(number.dropFirst(3).prefix(3))-\(number.dropFirst(6))\(extensionPart)"
        } else if number.count == 11 {
            
            let areaCode = number.dropFirst()
            return "+\(number.prefix(1)) (\(areaCode.prefix(3))) \(areaCode.dropFirst(3).prefix(3))-\(areaCode.dropFirst(6))\(extensionPart)"
        } else {
            
            return "Invalid Number"
        }
    }
    
    // MARK: Present Item
    func presetItemElement(response: Detail.GetItemElement.Response) {
        let item = response.item
        
        let phone = formatPhoneNumber(item.phone)
        let itemData = [
            ("Name", item.name),
            ("Username", item.username),
            ("Email", item.email),
            ("Street", item.address.street),
            ("Suite", item.address.suite),
            ("City", item.address.city),
            ("Phone", phone),
            ("Company", item.company.name)
        ]
        
        let viewModel = Detail.GetItemElement.ViewModel(itemData: itemData)
        viewController?.displayItem(viewModel: viewModel)
    }
}
