//
//  DetailViewController.swift
//  MasterDetailTest
//
//  Created by Javier Apaez Arcos on 06/02/25.
//  Copyright (c) 2025 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DetailDisplayLogic: class {
    func displayItem(viewModel: Detail.GetItemElement.ViewModel)
}

class DetailViewController: UIViewController, DetailDisplayLogic {
    var interactor: DetailBusinessLogic?
    var router: (NSObjectProtocol & DetailRoutingLogic & DetailDataPassing)?
    let tableView = UITableView()
    var itemData: [(String, String)] = []
    
    
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = DetailInteractor()
        let presenter = DetailPresenter()
        let router = DetailRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    
    private func setupUI() {
        view.backgroundColor = #colorLiteral(red: 0.9506271482, green: 0.9625944495, blue: 0.9623840451, alpha: 1)
        tableView.backgroundColor = .clear
        tableView.frame = view.bounds
        tableView.delegate = self
        tableView.dataSource = self
        tableView.separatorStyle = .none
        view.addSubview(tableView)
        
        tableView.register(CustomDetailTableViewCell.self, forCellReuseIdentifier: "Cell")
    }
    
    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
        getItem()
        
    }
    
    // MARK: Get Item
    func getItem() {
        let request = Detail.GetItemElement.Request()
        interactor?.getItem(request: request)
    }
    
    // MARK: Display Item
    func displayItem(viewModel: Detail.GetItemElement.ViewModel) {
        DispatchQueue.main.async {
            self.itemData = viewModel.itemData
            self.tableView.reloadData()
        }
    }
}
